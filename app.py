"""
TechLance Solutions ‚Äî Phase 4: Analytics Dashboard & Recommendations
Single-file Streamlit app (runs with `streamlit run app.py`).
If you *must* run with `python app.py`, see the __main__ block at the bottom
which attempts to invoke Streamlit as a subprocess for a single-command UX.

Place CSVs in ./data directory with the following schema:
- cleaned_data.csv: EmployeeID, BenefitID, UsageFrequency, LastUsedDate, Age, Gender, Department, Tenure, BenefitType, BenefitSubType, BenefitCost, SatisfactionScore, Comments

App features
- Caching (st.cache_data) for faster reloads
- Filters: Department, Age range, BenefitSubType
- Metrics: Utilization, Avg Satisfaction, Segments, Cost & ROI proxies
- Visualizations: usage trends, satisfaction by benefit, department heatmap, segments
- ‚ÄúGenerative AI insights‚Äù (rule-based text summarizer over comments)
- Export: KPI snapshot + recommendations to HTML (download button)

Dependencies (common in Streamlit Cloud / local env):
- streamlit, pandas, numpy, altair, plotly.express

Author: Generated by ChatGPT
"""

import streamlit as st
import pandas as pd
import plotly.express as px

# Load cleaned dataset from data folder
@st.cache_data
def load_data():
    df = pd.read_csv("data/cleaned_data.csv")
    return df

df = load_data()

st.set_page_config(page_title="TechLance Benefits Dashboard", layout="wide")
st.title("üìä TechLance Solutions Benefits Dashboard")

# Sidebar filters
st.sidebar.header("Filters")
selected_department = st.sidebar.multiselect("Select Department", df["Department"].unique())
selected_segment = st.sidebar.multiselect("Select Segment", df["Segment"].unique())

# Apply filters
filtered_df = df.copy()
if selected_department:
    filtered_df = filtered_df[filtered_df["Department"].isin(selected_department)]
if selected_segment:
    filtered_df = filtered_df[filtered_df["Segment"].isin(selected_segment)]

# Metrics section
st.subheader("Key Metrics")
col1, col2, col3, col4 = st.columns(4)

with col1:
    st.metric("Total Employees", filtered_df["EmployeeID"].nunique())
with col2:
    st.metric("Total Benefit Spend ($M)", round(filtered_df["Benefit_Spend"].sum() / 1e6, 2))
with col3:
    st.metric("Average Satisfaction", round(filtered_df["Satisfaction"].mean(), 2))
with col4:
    st.metric("ROI (%)", round(filtered_df["ROI"].mean(), 2))

# Visualization - Benefit Spend by Department
st.subheader("Benefit Spend by Department")
fig1 = px.bar(
    filtered_df.groupby("Department")["Benefit_Spend"].sum().reset_index(),
    x="Department",
    y="Benefit_Spend",
    color="Department",
    title="Benefit Spend by Department"
)
st.plotly_chart(fig1, use_container_width=True)

# Visualization - Satisfaction by Segment
st.subheader("Employee Satisfaction by Segment")
fig2 = px.box(
    filtered_df,
    x="Segment",
    y="Satisfaction",
    color="Segment",
    title="Satisfaction by Segment"
)
st.plotly_chart(fig2, use_container_width=True)

# ROI Trend Over Time
st.subheader("ROI Trend Over Time")
fig3 = px.line(
    filtered_df.groupby("Year")["ROI"].mean().reset_index(),
    x="Year",
    y="ROI",
    markers=True,
    title="ROI Trend"
)
st.plotly_chart(fig3, use_container_width=True)

st.success("Dashboard loaded successfully with cleaned_data.csv üöÄ")
