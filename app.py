"""
TechLance Solutions ‚Äî Phase 4: Analytics Dashboard & Recommendations
Single-file Streamlit app (runs with `streamlit run app.py`).
If you *must* run with `python app.py`, see the __main__ block at the bottom
which attempts to invoke Streamlit as a subprocess for a single-command UX.

Place CSVs in ./data directory with the following schema:
- cleaned_data.csv: EmployeeID, BenefitID, UsageFrequency, LastUsedDate, Age, Gender, Department, Tenure, BenefitType, BenefitSubType, BenefitCost, SatisfactionScore, Comments

App features
- Caching (st.cache_data) for faster reloads
- Filters: Department, Age range, BenefitSubType
- Metrics: Utilization, Avg Satisfaction, Segments, Cost & ROI proxies
- Visualizations: usage trends, satisfaction by benefit, department heatmap, segments
- ‚ÄúGenerative AI insights‚Äù (rule-based text summarizer over comments)
- Export: KPI snapshot + recommendations to HTML (download button)

Dependencies (common in Streamlit Cloud / local env):
- streamlit, pandas, numpy, altair, plotly.express

Author: Generated by ChatGPT
"""

import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="TechLance Benefits Dashboard", layout="wide")
st.title("üìä TechLance Solutions Benefits Dashboard")

# Load cleaned dataset from data folder
@st.cache_data
def load_data():
    df = pd.read_csv("data/cleaned_data.csv")
    # derive spend as cost √ó frequency
    df["Benefit_Spend"] = df["BenefitCost"] * df["UsageFrequency"]
    return df

df = load_data()

# Sidebar filters
st.sidebar.header("Filters")
selected_department = st.sidebar.multiselect("Select Department", df["Department"].unique())
selected_benefit = st.sidebar.multiselect("Select Benefit SubType", df["BenefitSubType"].unique())

# Apply filters
filtered_df = df.copy()
if selected_department:
    filtered_df = filtered_df[filtered_df["Department"].isin(selected_department)]
if selected_benefit:
    filtered_df = filtered_df[filtered_df["BenefitSubType"].isin(selected_benefit)]

# Metrics section
st.subheader("Key Metrics")
col1, col2, col3 = st.columns(3)

with col1:
    st.metric("Total Employees", filtered_df["EmployeeID"].nunique())
with col2:
    st.metric("Total Benefit Spend ($M)", round(filtered_df["Benefit_Spend"].sum() / 1e6, 2))
with col3:
    st.metric("Average Satisfaction", round(filtered_df["SatisfactionScore"].mean(), 2))

# Visualization - Benefit Spend by Department
st.subheader("Benefit Spend by Department")
fig1 = px.bar(
    filtered_df.groupby("Department")["Benefit_Spend"].sum().reset_index(),
    x="Department",
    y="Benefit_Spend",
    color="Department",
    title="Benefit Spend by Department"
)
st.plotly_chart(fig1, use_container_width=True)

# Visualization - Satisfaction by Benefit SubType
st.subheader("Employee Satisfaction by Benefit SubType")
fig2 = px.box(
    filtered_df,
    x="BenefitSubType",
    y="SatisfactionScore",
    color="BenefitSubType",
    title="Satisfaction by Benefit SubType"
)
st.plotly_chart(fig2, use_container_width=True)

# Usage Frequency Trend (by BenefitType)
st.subheader("Usage Frequency by Benefit Type")
fig3 = px.bar(
    filtered_df.groupby("BenefitType")["UsageFrequency"].sum().reset_index(),
    x="BenefitType",
    y="UsageFrequency",
    color="BenefitType",
    title="Usage Frequency by Benefit Type"
)
st.plotly_chart(fig3, use_container_width=True)

st.success("Dashboard loaded successfully with cleaned_data.csv üöÄ")
